import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import pandas as pd
import os
from os.path import join

save_path = os.path.abspath(r'./documentation')
# v_prime = - u - 1.5 * u**2
# v = u_prime
alpha_range = np.linspace(0.48 * np.pi, 0.52 * np.pi, 9)
# alpha = np.array([alpha_range[0]])
x = {}
y = {}
for alpha in alpha_range:
    # alpha = alpha_range[0]
    DELTA_PHI = np.pi / 180
    u = np.array([2/3]) # Distant = 1.5 R_s
    
    u_prime = np.array(- 1 /(u[0] * np.tan(alpha)) - 0.5 * (1.5 * u[0] ** 2 - u[0]) * DELTA_PHI)
    max_step = 720
    i = 0
    while True:
        u_prime = np.append(u_prime, - 1 / (u[-1] * np.tan(alpha)) +
                            0.5 * (1.5 * u[-1] ** 2 - u[-1]) * DELTA_PHI)
        u = np.append(u, u[-1] + 1 / (u[-1] * np.tan(alpha)) * DELTA_PHI)
        # alpha = np.append(alpha, np.pi - phi[-1] - np.arcsin(np.sqrt(DELTA_PHI **
        #                   2 + (DELTA_PHI / np.tan(alpha[-1]))**2) / np.sin(phi[-1])) - DELTA_PHI)
        i += 1
        continue_bool = np.logical_and(np.logical_and(i < max_step, u[-1] < 1), u[-1] > 0.3)
        # loop√ç
        if continue_bool:
            continue
        else:
            break

    angles = np.linspace(0, DELTA_PHI * len(u), len(u)) % (2*np.pi)
    x[f"{alpha}"] = np.cos(angles) / u
    y[f"{alpha}"] = np.sin(angles) / u

ax = plt.figure().add_subplot(aspect='equal')
circle1 = plt.Circle((0, 0), 1, color='k', alpha=0.2)
for key in x.keys():
    ax.plot(x[key], y[key], lw=0.5)
ax.add_patch(circle1)
ax.set_xlim(-2,2)
ax.set_ylim(-2,2)
# plt.show()
plt.savefig(join(save_path,"photon_trace.pdf"))